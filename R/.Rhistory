#' Yelp Fusion API
#'
#' This function request information about resturants on Yelp
#' through Yelp Fusion API
#'
#' @param
#' @keywords
#' @export
#' @examples
#' yelp_api()
yelp_api <- function() {
library(httr)
library(stringr)
library(dplyr)
library(jsonlite)
ca <- suppressWarnings(cacounty())
query_params = list(limit = 10,
location = ca$County[1],
term = "Chinese")
baseurl <- "https://api.yelp.com"
endpoint = paste0(baseurl, "/v3/businesses/search")
request <- GET(endpoint, query = query_params,
add_headers(Authorization = paste("Bearer",
Sys.getenv("YELP_KEY"))))
if (http_status(request)$category != "Success") {
stop("You status is bad: ", http_status(request)$reason)
}
result <- fromJSON(content(request, as = "text"))$businesses
return(result)
}
yelp_api()
library(httr)
library(stringr)
library(dplyr)
library(jsonlite)
query_params = list(limit = 2,
location = county,
term = "Chinese")
baseurl <- "https://api.yelp.com"
endpoint = paste0(baseurl, "/v3/businesses/search")
request <- GET(endpoint, query = query_params,
add_headers(Authorization = paste("Bearer",
Sys.getenv("YELP_KEY"))))
if (http_status(request)$category != "Success") {
stop("You status is bad: ", http_status(request)$reason)
}
result <- fromJSON(content(request, as = "text"))$businesses
result
library(httr)
library(stringr)
library(dplyr)
library(jsonlite)
query_params = list(limit = 2,
location = "San Diego",
term = "Chinese")
baseurl <- "https://api.yelp.com"
endpoint = paste0(baseurl, "/v3/businesses/search")
request <- GET(endpoint, query = query_params,
add_headers(Authorization = paste("Bearer",
Sys.getenv("YELP_KEY"))))
if (http_status(request)$category != "Success") {
stop("You status is bad: ", http_status(request)$reason)
}
result <- fromJSON(content(request, as = "text"))$businesses
result <- result %>%
select()
return(result)
View(result)
View(result)
library(httr)
library(stringr)
library(dplyr)
library(jsonlite)
query_params = list(limit = 2,
location = "San Diego",
term = "Chinese")
baseurl <- "https://api.yelp.com"
endpoint = paste0(baseurl, "/v3/businesses/search")
request <- GET(endpoint, query = query_params,
add_headers(Authorization = paste("Bearer",
Sys.getenv("YELP_KEY"))))
if (http_status(request)$category != "Success") {
stop("You status is bad: ", http_status(request)$reason)
}
result <- fromJSON(content(request, as = "text"))$businesses
View(result)
result <- result %>%
select(name, review_count, rating, city = location.city) %>%
arrange(desc(rating), desc(review_count))
View(result)
result <- result %>%
select(name, review_count, rating, city = location.city) %>%
arrange(desc(rating), desc(review_count))
View(result)
View(result)
View(result)
result <- result %>%
select(name, review_count, rating, county = location.city) %>%
arrange(desc(rating), desc(review_count))
result <- result %>%
select(name, review_count, rating, city = location$city) %>%
arrange(desc(rating), desc(review_count))
result <- result %>%
select(name, review_count, rating, city = city) %>%
arrange(desc(rating), desc(review_count))
result <- result %>%
select(name, review_count, rating, city = location.city) %>%
arrange(desc(rating), desc(review_count))
result <- result %>%
select(name, review_count, rating) %>%
arrange(desc(rating), desc(review_count)) %>%
mutate(ave_rat = mean(rating, na.rm = T),
ave_rev_count = mean(review_count, na.rm = T)
best_rest = result$name[1],
rest_num = nrow(result))
result <- result %>%
select(name, review_count, rating) %>%
arrange(desc(rating), desc(review_count)) %>%
mutate(ave_rat = mean(rating, na.rm = T),
ave_rev_count = mean(review_count, na.rm = T)
best_rest = result$name[1],
rest_num = nrow(result))
result <- result %>%
select(name, review_count, rating) %>%
arrange(desc(rating), desc(review_count)) %>%
mutate(ave_rat = mean(rating, na.rm = T),
ave_rev_count = mean(review_count, na.rm = T)
best_rest = result$name[1],
rest_num = nrow(result))
result <- result %>%
select(name, review_count, rating) %>%
arrange(desc(rating), desc(review_count)) %>%
mutate(ave_rat = mean(rating, na.rm = T),
ave_rev = mean(review_count, na.rm = T)
best_rest = result$name[1],
best_rest_rat = result$rating[1],
best_rest_rev = result$review_count[1],
rest_num = nrow(result)) %>%
select(rest_num,ave_rat, ave_rev,
best_rest, best_rest_rat, best_rest_rev)
result <- result %>%
select(name, review_count, rating) %>%
arrange(desc(rating), desc(review_count))
View(result)
View(result)
result <- result %>%
mutate(ave_rat = mean(rating, na.rm = T),
ave_rev = mean(review_count, na.rm = T)
best_rest = result$name[1],
best_rest_rat = result$rating[1],
best_rest_rev = result$review_count[1],
rest_num = nrow(result))
result <- result %>%
mutate(ave_rat = mean(rating, na.rm = T),
ave_rev = mean(review_count, na.rm = T),
best_rest = result$name[1],
best_rest_rat = result$rating[1],
best_rest_rev = result$review_count[1],
rest_num = nrow(result))
View(result)
result <- result %>%
select(rest_num,ave_rat, ave_rev,
best_rest, best_rest_rat, best_rest_rev)
View(result)
result <- result %>%
slice(1:1) %>%
select(rest_num,ave_rat, ave_rev,
best_rest, best_rest_rat, best_rest_rev)
View(result)
url <- "https://en.wikipedia.org/wiki/List_of_cities_and_towns_in_California"
wiki_html <- rvest::read_html(url)
sortable_nodes <- rvest::html_nodes(wiki_html, ".sortable")
df10 <- sortable_nodes %>%
rvest::html_table(header = T, fill = T) %>%
as.data.frame()
df10 <- df10 %>%
dplyr::select(City = Name, County,
Pop10 = Population..2010..1..8..9., Area = Land.area.1..1)
df10 <- df10[-c(1),]
for (i in 1:482) {
df10$Pop10[i] <- stringr::str_replace_all(df10$Pop10[i], ",", "")
}
ca <- dplyr::left_join(df10, pp19, by = "City")
ca$Pop10 <- as.numeric(ca$Pop10)
ca$Area <- as.numeric(df10$Area)
ca <- ca %>%
dplyr::group_by(County) %>%
dplyr::summarise(Pop10 = sum(Pop10, na.rm = T),
Pop19 = sum(Pop19, na.rm = T),
`Area (km^2)` = sum(Area, na.rm = T))
load("/Users/nikkyxiong/Desktop/bestresturantintown/data/ca.rda")
View(ca)
pp19
